<!DOCTYPE html>
<html><head><title>Blockchain Demo</title>
<meta charset="UTF-8">
<link rel=stylesheet href="../css/blockchain.css" type="text/css">
<style type="text/css">
.main
{
  width: 90%;
}

</style>
</head>
<body>
  <h2>Generate Blockchain</h2>
  <div class="generate">
    <div class="header-hash">Previous hash</div>
    <div class="header-data">Data</div>
    <div class="header-user">User</div>
    <div class="header-nonce">Nonce</div>

    <div class="broken-out-inputs-hash"><input id="previous-hash" type="text" value="" placeholder="Previous Hash" onkeyup="generate_hash()" onblur="generate_hash()" /></div>
    <div class="broken-out-inputs-data"><input id="data" type="text" value="" placeholder="Data" onkeyup="generate_hash()" onblur="generate_hash()" /></div>
    <div class="broken-out-inputs-user"><input id="user" type="text" value="" placeholder="User" onkeyup="generate_hash()" onblur="generate_hash()" /></div>
    <div class="broken-out-inputs-nonce"><span id="nonce">0</span></div>
    <div class="broken-out-inputs-increment"><button id="increment" onclick="increment(1)">Increment</button></div>
    <div class="broken-out-inputs-decrement"><button id="decrement" onclick="increment(-1)">Decrement</button></div>
    <div class="broken-out-inputs-reset"><button id="reset" onclick="reset()">Reset</button></div>

    <div class="input-text-label"><label>Combined Input</label></div>
    <div class="input-text-value"><span id="input-text"></span></div>

    <div class="output-label"><label>Output hash</label></div>
    <div class="output-value"><span class="digest" id="output"></span></div>
    <div class="output-zero-label"><label>Zeros:</label></div>
    <div class="output-counter"><span id="counter">0</span></div>
  </div>
  <hr>
  <h2>Verify Blockchain</h2>
  <div class="verify">
    <div class="verify-input-text-label"><label>Text to Verify</label></div>
    <div class="verify-input-text-value"><input id="verify-text" type="text" value="" placeholder="text" onkeyup="verify_hash()" onblur="verify_hash()" /></div>

    <div class="verify-output-label"><label>Output hash</label></div>
    <div class="verify-output-value"><span class="digest" id="verify-hash"></span></div>
  </div>
  <hr>
  <h2>Explanation</h2>
  <p>Blockchains allow us to record data in a way that becomes harder to change the older it is.  To add a block to the chain we take the piece of data we want to record, and combine it with the hash of the previous block.  This combination is hashed and the result is the hash of this block.  If this is the first block, a special genesis hash is used, which can be anything agreed upon by the users.  </p>
  <p>In the case of proof of work blockchains, an added nonce (an arbitrary number that is only be used once) can be combined with the data and previous hash.  The nonce is incremented until the hash meets some condition, eg, a certain number of leading 0s in the hash.  Setting this requirement proves that time was spent generating the hash, and ensures that finding a different hash that also meets the requirement would take a significant amount of additional time.</p>
  <p>Upon finding a hash that meets the requirement, the nodes in the blockchain can immediately switch to finding the next block, using the newly found hash as the previous hash.  Changing a block in the chain would require finding a new hash for every block that came after it.  Therefore, each block added to a chain increases the security of previous blocks.</p>

<script src="../js/hashfunctions.js"></script>
<script type="text/javascript">
<!--
var LOWER_HEX = "0123456789abcdef";
var DELIMITER = ';'
window.onload = function() {
  generate_hash()
  verify_hash()
};

function reset() {
  document.getElementById('nonce').textContent = '0'
  generate_hash()
}

function increment(delta) {
  nonce = parseInt(document.getElementById('nonce').textContent)
  nonce += delta
  document.getElementById('nonce').textContent = nonce
  generate_hash()
}

function generate_hash() {
  previous_hash = document.getElementById('previous-hash').value
  data = document.getElementById('data').value
  user = document.getElementById('user').value
  nonce = document.getElementById('nonce').textContent
  combined_input = previous_hash + DELIMITER + data + DELIMITER + user + DELIMITER + nonce
  document.getElementById('input-text').textContent = combined_input
  digest = any_sha256(combined_input, LOWER_HEX)
  document.getElementById('output').textContent = digest
  document.getElementById('counter').textContent = count_leading_chars(digest, '0')
}

function verify_hash() {
  input_text = document.getElementById('verify-text').value
  document.getElementById('verify-hash').textContent = any_sha256(input_text, LOWER_HEX)
}

function count_leading_chars(string, char) {
  for (var ii = 0; ii < string.length; ii++) {
    if (string[ii] != char) { break; }
  }
  return ii;
}
-->
</script>
</body>
</html>
